// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mar.domain;

import com.mar.domain.Timer;
import java.util.Objects;

privileged aspect Timer_Roo_JavaBean {
    
    /**
     * Gets id value
     * 
     * @return Long
     */
    public Long Timer.getId() {
        return this.id;
    }
    
    /**
     * Sets id value
     * 
     * @param id
     * @return Timer
     */
    public Timer Timer.setId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Gets version value
     * 
     * @return Integer
     */
    public Integer Timer.getVersion() {
        return this.version;
    }
    
    /**
     * Sets version value
     * 
     * @param version
     * @return Timer
     */
    public Timer Timer.setVersion(Integer version) {
        this.version = version;
        return this;
    }
    
    /**
     * Gets message value
     * 
     * @return String
     */
    public String Timer.getMessage() {
        return this.message;
    }
    
    /**
     * Sets message value
     * 
     * @param message
     * @return Timer
     */
    public Timer Timer.setMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * This `equals` implementation is specific for JPA entities and uses 
     * the entity identifier for it, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @param obj
     * @return Boolean
     */
    public boolean Timer.equals(Object obj) {
        if (this == obj) {
            return true;
        }
        // instanceof is false if the instance is null
        if (!(obj instanceof Timer)) {
            return false;
        }
        return getId() != null && Objects.equals(getId(), ((Timer) obj).getId());
    }
    
    /**
     * This `hashCode` implementation is specific for JPA entities and uses a fixed `int` value to be able 
     * to identify the entity in collections after a new id is assigned to the entity, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @return Integer
     */
    public int Timer.hashCode() {
        return 31;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String Timer.toString() {
        return "Timer {" + 
                "id='" + id + '\'' + 
                ", version='" + version + '\'' + 
                ", message='" + message + '\'' + "}" + super.toString();
    }
    
}
