// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mar.repository;

import com.mar.entities.Movie;
import com.mar.entities.QMovie;
import com.mar.entities.Showing;
import com.mar.repository.MovieRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect MovieRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: MovieRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovieRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovieRepositoryImpl.SHOWING = "showing";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movie> MovieRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QMovie movie = QMovie.movie;
        
        JPQLQuery<Movie> query = from(movie);
        
        Path<?>[] paths = new Path<?>[] {movie.title,movie.showing};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, movie.title)
			.map(SHOWING, movie.showing);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, movie);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movie> MovieRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QMovie movie = QMovie.movie;
        
        JPQLQuery<Movie> query = from(movie);
        
        Path<?>[] paths = new Path<?>[] {movie.title,movie.showing};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(movie.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, movie.title)
			.map(SHOWING, movie.showing);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, movie);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param showing
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movie> MovieRepositoryImpl.findByShowing(Showing showing, GlobalSearch globalSearch, Pageable pageable) {
        
        QMovie movie = QMovie.movie;
        
        JPQLQuery<Movie> query = from(movie);
        
        Assert.notNull(showing, "showing is required");
        
        query.where(movie.showing.eq(showing));
        Path<?>[] paths = new Path<?>[] {movie.title,movie.showing};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, movie.title)
			.map(SHOWING, movie.showing);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, movie);
    }
    
}
